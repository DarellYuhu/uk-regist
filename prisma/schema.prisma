// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  username    String @unique
  password    String @unique
  displayName String @unique
  role        Role

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  StudentProfile StudentProfile?
}

model NomorUrut {
  id Int @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProfile {
  id                  Int      @id @default(autoincrement())
  nomorIndukMahasiswa String?  @unique
  namaIjazah          String
  alamat              String   @default("")
  jenisKelamin        String
  email               String
  noTelp              String
  propinsiDomisili    String
  asalSekolah         String
  programStudi        String
  status              Status   @default(WAITING)
  doctorApproval      Status   @default(WAITING)
  tempatLahir         String
  tanggalLahir        DateTime @db.Date
  testMatematika      Int      @default(0)
  testBahasaInggris   Int      @default(0)

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  UploadedDocuments UploadedDocuments?
  RejectionMessage  RejectionMessage?
}

model RejectionMessage {
  studentProfileId Int            @unique
  StudentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])

  doctor    String?
  registrar String?
}

model UploadedDocuments {
  profileId      Int            @unique
  StudentProfile StudentProfile @relation(fields: [profileId], references: [id])
  suratDokter    String         @unique
  SuratDokter    File           @relation("surat_dokter", fields: [suratDokter], references: [id])
  ijazah         String         @unique
  Ijazah         File           @relation("ijazah", fields: [ijazah], references: [id])
  kartuKeluarga  String         @unique
  KartuKeluarga  File           @relation("kartu_keluarga", fields: [kartuKeluarga], references: [id])
  aktaKelahiran  String         @unique
  AktaKelahiran  File           @relation("akta_kelahiran", fields: [aktaKelahiran], references: [id])
  suratBaptis    String?        @unique
  SuratBaptis    File?          @relation("surat_baptis", fields: [suratBaptis], references: [id])
}

model File {
  id   String @id @default(uuid())
  name String
  path String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SuratDokter   UploadedDocuments? @relation("surat_dokter")
  Ijazah        UploadedDocuments? @relation("ijazah")
  KartuKeluarga UploadedDocuments? @relation("kartu_keluarga")
  AktaKelahiran UploadedDocuments? @relation("akta_kelahiran")
  SuratBaptis   UploadedDocuments? @relation("surat_baptis")
}

enum Role {
  STUDENT
  DOCTOR
  REGISTRAR
}

enum Status {
  APPROVE
  REJECT
  WAITING
}
